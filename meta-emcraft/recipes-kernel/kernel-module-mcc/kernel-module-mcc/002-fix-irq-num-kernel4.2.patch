diff --git a/mcc_linux.c b/mcc_linux.c
index 1c58b12..cabf257 100644
--- mcc_linux.c
+++ mcc_linux.c
@@ -34,6 +34,9 @@
 #include <linux/sched.h>
 #include <linux/time.h>
 #include <linux/mm.h>
+#include <linux/of.h>
+#include <linux/of_irq.h>
+#include <linux/of_address.h>
 
 // common to MQX and Linux
 // TODO the order of these should not matter
@@ -173,7 +176,7 @@ static int bad = 0;
 struct work_struct cpu_to_cpu_work;
 static irqreturn_t cpu_to_cpu_irq_handler(int irq, void *dev_id)
 {
-	int interrupt_id = irq - MVF_INT_CPU_INT0;
+	int interrupt_id = irq_get_irq_data(irq)->hwirq;
 if(bad) {
 	//Clear the interrupt status
 	MSCM_WRITE((MSCM_IRCPnIR_INT0_MASK<<interrupt_id), MSCM_IRCPnIR);
@@ -252,7 +255,6 @@ if(nprint > 0) {
 
 static int mcc_open(struct inode *i, struct file *f)
 {
-
 	struct mcc_private_data *priv_p = (struct mcc_private_data *)kmalloc(sizeof(struct mcc_private_data), GFP_KERNEL);
 	if(!priv_p)
 		return -ENOMEM;
@@ -718,7 +720,9 @@ static struct file_operations mcc_fops =
 static int __init mcc_init(void) /* Constructor */
 {
 	int count, k;
-	mscm_base = ioremap(MVF_MSCM_BASE_ADDR, 4);
+	struct device *dev;
+
+	mscm_base = ioremap_nocache(MVF_MSCM_BASE_ADDR, 4);
 	if (alloc_chrdev_region(&first, 0, 1, "mcc") < 0)
 	{
 		return -EIO;
@@ -730,7 +734,7 @@ static int __init mcc_init(void) /* Constructor */
 		return -EIO;
 	}
 
-	if (device_create(cl, NULL, first, NULL, "mcc") == NULL)
+	if ((dev = device_create(cl, NULL, first, NULL, "mcc")) == NULL)
 	{
 		class_destroy(cl);
 		unregister_chrdev_region(first, 1);
@@ -764,7 +768,12 @@ static int __init mcc_init(void) /* Constructor */
 	//Register the interrupt handler
 	for(count=0; count < MAX_MVF_CPU_TO_CPU_INTERRUPTS; count++)
 	{
-		if (request_irq(MVF_INT_CPU_INT0 + count, cpu_to_cpu_irq_handler, 0, MCC_DRIVER_NAME, mscm_base) != 0)
+		int res, irq;
+		struct device_node *np;
+
+		np = of_find_node_by_name(NULL, "cpu2cpu");
+		irq = of_irq_get(np, count);
+		if ((res = devm_request_irq(dev, irq, cpu_to_cpu_irq_handler, 0, MCC_DRIVER_NAME, mscm_base)) != 0)
 		{
 			printk(KERN_ERR "Failed to register MVF CPU TO CPU interrupt:%d\n",count);
 
@@ -786,10 +795,7 @@ print_bookeeping_data();
  
 static void __exit mcc_exit(void) /* Destructor */
 {
-	int count;
-	// make sure to let go of interrupts and shmem
-	for(count=0; count < MAX_MVF_CPU_TO_CPU_INTERRUPTS; count++)
-		free_irq(MVF_INT_CPU_INT0 + count, mscm_base);
+	// make sure to let go of shmem
 	mcc_deinitialize_shared_mem();
 
 	iounmap(mscm_base);
