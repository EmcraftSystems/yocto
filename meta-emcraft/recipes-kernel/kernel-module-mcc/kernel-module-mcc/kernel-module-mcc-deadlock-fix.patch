Fix MQX and Linux deadlock caused by heavy MCC traffic
    
diff --git a/arch/arm/mach-mvf/mcc/mcc_linux.c b/arch/arm/mach-mvf/mcc/mcc_linux.c
index 5ec07d6..1c58b12 100644
--- a/mcc_linux.c
+++ b/mcc_linux.c
@@ -170,12 +170,9 @@ static int deregister_queue(MCC_ENDPOINT endpoint)
 // ************************************ Interrupt handler *************************************************
 static int nprint = -3;
 static int bad = 0;
+struct work_struct cpu_to_cpu_work;
 static irqreturn_t cpu_to_cpu_irq_handler(int irq, void *dev_id)
 {
-	MCC_SIGNAL signal;
-	int ret;
-	int i = 0;
-
 	int interrupt_id = irq - MVF_INT_CPU_INT0;
 if(bad) {
 	//Clear the interrupt status
@@ -184,14 +181,30 @@ if(bad) {
 	return IRQ_HANDLED;
 }
 
+	schedule_work(&cpu_to_cpu_work);
+
+	//Clear the interrupt status
+	MSCM_WRITE((MSCM_IRCPnIR_INT0_MASK<<interrupt_id), MSCM_IRCPnIR);
+
+	return IRQ_HANDLED;
+}
+
+static void cpu_to_cpu_work_handler(struct work_struct *work) 
+{
+	MCC_SIGNAL signal;
+	int ret;
+	int i = 0;
 
 if(nprint > 0) {
 	printk("==============\n");
 	print_bookeeping_data();
 }
-	mcc_sema4_isr_grab();
+	if (mcc_sema4_grab()) {
+		schedule_work(&cpu_to_cpu_work);
+		return;
+	}
 	ret = mcc_dequeue_signal(MCC_CORE_NUMBER, &signal);
-	mcc_sema4_isr_release();
+	mcc_sema4_release();
 
 
 	while(ret)
@@ -226,15 +239,13 @@ if(nprint > 0) {
 	printk("==============\n");
 	print_bookeeping_data();
 }
-		mcc_sema4_isr_grab();
+		if (mcc_sema4_grab()) {
+			schedule_work(&cpu_to_cpu_work);
+			return;
+		}
 		ret = mcc_dequeue_signal(MCC_CORE_NUMBER, &signal);
-		mcc_sema4_isr_release();
+		mcc_sema4_release();
 	}
-
-	//Clear the interrupt status
-	MSCM_WRITE((MSCM_IRCPnIR_INT0_MASK<<interrupt_id), MSCM_IRCPnIR);
-
-	return IRQ_HANDLED;
 }
 
 // ************************************ Driver entry points *************************************************
@@ -748,6 +759,8 @@ static int __init mcc_init(void) /* Constructor */
 	if(mcc_initialize_shared_mem())
 		return -EIO;
 
+	INIT_WORK(&cpu_to_cpu_work, cpu_to_cpu_work_handler);
+
 	//Register the interrupt handler
 	for(count=0; count < MAX_MVF_CPU_TO_CPU_INTERRUPTS; count++)
 	{
