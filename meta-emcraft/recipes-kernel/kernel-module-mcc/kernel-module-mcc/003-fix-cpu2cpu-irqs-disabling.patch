diff --git a/mcc_sema4_linux.c b/mcc_sema4_linux.c
index 4b9cb5d..a87b1b8 100644
--- a/mcc_sema4_linux.c
+++ b/mcc_sema4_linux.c
@@ -23,6 +23,7 @@
 #include <linux/semaphore.h>
 #include <linux/mvf_sema4.h>
 #include <linux/interrupt.h>
+#include <linux/of_irq.h>
 
 // common to MQX and Linux
 // TODO the order of these should not matter
@@ -55,16 +56,21 @@ DEFINE_SEMAPHORE(linux_mutex);
 
 // platform semaphore handle
 static MVF_SEMA4* sema4 = NULL;
+static int cpu2cpu_irqs[4];
 
 int mcc_sema4_grab()
 {
-	int i;
+	int i, ret;
+	struct device_node *np;
 
 	// inited yet?
 	if(!sema4) {
 		int ret = mvf_sema4_assign(MVF_SHMEM_SEMAPHORE_NUMBER, &sema4);
 		if(ret)
 			return ret;
+		np = of_find_node_by_name(NULL, "cpu2cpu");
+		for(i = 0; i<MAX_MVF_CPU_TO_CPU_INTERRUPTS; i++)
+			cpu2cpu_irqs[i] = of_irq_get(np, i);
 	}
 
 	// only 1 linux process at a time
@@ -73,9 +79,13 @@ int mcc_sema4_grab()
 
 	// no M4 interrupts while we're working
 	for(i = 0; i<MAX_MVF_CPU_TO_CPU_INTERRUPTS; i++)
-		disable_irq(MVF_INT_CPU_INT0 + i);
+		disable_irq(cpu2cpu_irqs[i]);
 
-	return mvf_sema4_lock(sema4, TIME_PROTECT_US, true);
+	ret = mvf_sema4_lock(sema4, TIME_PROTECT_US, true);
+	if (ret)
+		up(&linux_mutex);
+
+	return ret;
 }
 
 int mcc_sema4_release()
@@ -88,7 +98,7 @@ int mcc_sema4_release()
 	ret = mvf_sema4_unlock(sema4);
 
 	for(i = 0; i<MAX_MVF_CPU_TO_CPU_INTERRUPTS; i++)
-		enable_irq(MVF_INT_CPU_INT0 + i);
+		enable_irq(cpu2cpu_irqs[i]);
 
 	// now that M4 has been released, release linux
 	up(&linux_mutex);
